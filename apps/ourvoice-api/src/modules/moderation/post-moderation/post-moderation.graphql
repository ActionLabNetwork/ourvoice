type Query {
  moderationPost(id: Int!): ModerationPost
  moderationPosts(
    filter: ModerationPostsFilterInput
    pagination: ModerationPostPaginationInput
  ): ModerationPostConnection
}

type Mutation {
  createModerationPost(data: ModerationPostCreateInput!): ModerationPost!
}

type ModerationPost {
  id: Int!
  title: String!
  content: String!
  categoryIds: [Int]!
  files: [String]
  identifier: String!
  sequence: Int!
  status: ModerationPostStatus!
  version: Int!
  timestamp: String!
  latest: Boolean!
  moderators: [PostModeration]
  comments: [ModerationComment]
  authorHash: String!
}

type PostModeration {
  post: ModerationPost!
  moderatorHash: String!
  decision: ModerationDecision!
  reason: String
  timestamp: String!
}

enum ModerationDecision {
  ACCEPTED
  REJECTED
}

enum ModerationPostStatus {
  PENDING
  APPROVED
  REJECTED
}

input ModerationPostsFilterInput {
  title: String
  content: String
  status: ModerationPostStatus
  authorHash: String
}

input ModerationPostPaginationInput {
  cursor: String
  limit: Int
}

type ModerationPostEdge {
  node: ModerationPost!
  cursor: String!
}

type ModerationPostConnection {
  totalCount: Int
  pageInfo: ModerationPostPageInfo!
  edges: [ModerationPostEdge]
}

type ModerationPostPageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean
}

input ModerationPostCreateInput {
  title: String!
  content: String!
  categoryIds: [Int]!
  files: [String]
  identifier: String!
  authorHash: String!
}
