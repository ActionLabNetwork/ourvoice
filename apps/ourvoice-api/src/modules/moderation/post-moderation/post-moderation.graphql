type Query {
  moderationPost(id: Int!): ModerationPost
  moderationPosts(
    filter: ModerationPostsFilterInput
    pagination: ModerationPostPaginationInput
  ): ModerationPostConnection
  postVersion(id: Int!): ModerationPostVersion
}

type Mutation {
  createModerationPost(data: ModerationPostCreateInput!): ModerationPost
  approveModerationPostVersion(
    id: Int!
    moderatorHash: String!
    moderatorNickname: String!
    reason: String
  ): ModerationPost
  rejectModerationPostVersion(
    id: Int!
    moderatorHash: String!
    moderatorNickname: String!
    reason: String!
  ): ModerationPost
  modifyModerationPost(
    postId: Int!
    moderatorHash: String!
    moderatorNickname: String!
    reason: String!
    data: ModerationPostModifyInput!
    hasContentWarning: Boolean!
  ): ModerationPost!
  rollbackModifiedModerationPost(postId: Int!): ModerationPost
  renewPostModeration(
    postModerationId: Int!
    moderatorHash: String!
  ): ModerationPost
}

type ModerationPost {
  id: Int!
  status: ModerationPostStatus!
  versions: [ModerationPostVersion!]!
  requiredModerations: Int!
  authorHash: String!
  authorNickname: String!
}

type ModerationPostVersion {
  id: Int!
  title: String!
  content: String!
  categoryIds: [Int!]!
  files: [String!]
  version: Int!
  reason: String
  hasContentWarning: Boolean!
  hasFromTheModeratorsTag: Boolean!
  authorHash: String!
  authorNickname: String!
  latest: Boolean!
  timestamp: String!
  moderations: [PostModeration!]
}

type PostModeration {
  id: Int!
  postVersion: ModerationPostVersion!
  moderatorHash: String!
  moderatorNickname: String!
  decision: ModerationDecision!
  reason: String
  timestamp: String!
}

enum ModerationDecision {
  ACCEPTED
  REJECTED
}

enum ModerationPostStatus {
  PENDING
  APPROVED
  REJECTED
}

input ModerationPostCreateInput {
  title: String!
  content: String!
  categoryIds: [Int!]!
  files: [String]
  authorHash: String!
  authorNickname: String!
  hasFromTheModeratorsTag: Boolean!
}

input ModerationPostsFilterInput {
  status: ModerationPostStatus
  published: Boolean
  archived: Boolean
}

input ModerationPostPaginationInput {
  after: String
  before: String
  limit: Int
}

type ModerationPostEdge {
  node: ModerationPost!
  cursor: String!
}

type ModerationPostConnection {
  totalCount: Int
  pageInfo: ModerationPostPageInfo!
  edges: [ModerationPostEdge]
}

type ModerationPostPageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

input ModerationPostModifyInput {
  title: String
  content: String
  categoryIds: [Int!]
  files: [String]
}
