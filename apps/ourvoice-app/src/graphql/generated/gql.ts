/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation ApproveModerationCommentVersion(\n    $id: Int!\n    $moderatorHash: String!\n    $moderatorNickname: String!\n    $reason: String\n  ) {\n    approveModerationCommentVersion(\n      id: $id\n      moderatorHash: $moderatorHash\n      moderatorNickname: $moderatorNickname\n      reason: $reason\n    ) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        content\n        timestamp\n        version\n        authorHash\n        authorNickname\n        reason\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n": types.ApproveModerationCommentVersionDocument,
    "\n  mutation ApproveModerationPostVersion($id: Int!, $moderatorHash: String!, $moderatorNickname: String!, $reason: String) {\n    approveModerationPostVersion(id: $id, moderatorHash: $moderatorHash, moderatorNickname: $moderatorNickname, reason: $reason) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      status\n      versions {\n        id\n        title\n        content\n        categoryIds\n        files\n        timestamp\n        version\n        authorHash\n        authorNickname\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n": types.ApproveModerationPostVersionDocument,
    "\n  mutation CreateComment($data: CommentCreateInput!) {\n    createComment(data: $data) {\n      id\n      content\n      createdAt\n      # author {\n      #   id\n      #   nickname\n      # }\n      post {\n        id\n        title\n      }\n      parent {\n        id\n        content\n      }\n    }\n  }\n": types.CreateCommentDocument,
    "\n  mutation CreateModerationComment($data: ModerationCommentCreateInput!) {\n    createModerationComment(data: $data) {\n      id\n      status\n    }\n  }\n": types.CreateModerationCommentDocument,
    "\n  mutation CreateModerationPost($data: ModerationPostCreateInput!) {\n    createModerationPost(data: $data) {\n      id\n      status\n    }\n  }\n": types.CreateModerationPostDocument,
    "\n  mutation CreateOrDeleteVote($data: VoteCreateInput!) {\n    createVote(data: $data) {\n      id\n      voteType\n      authorHash\n      authorNickname\n      post {\n        id\n        votesUp\n        votesDown\n      }\n      comment {\n        id\n        votesUp\n        votesDown\n      }\n    }\n  }\n": types.CreateOrDeleteVoteDocument,
    "\n  mutation CreatePoll($data: PollCreateInput!) {\n    createPoll(data: $data) {\n      id\n      active\n      options {\n        id\n        option\n      }\n      postLink\n      published\n      question\n      expiresAt\n      createdAt\n      weight\n    }\n  }\n": types.CreatePollDocument,
    "\n  mutation DeleteComment($deleteCommentId: Int!) {\n    deleteComment(id: $deleteCommentId) {\n      id\n      # author {\n      #   id\n      #   nickname\n      # }\n      content\n      parent {\n        id\n        content\n      }\n      post {\n        id\n        title\n      }\n    }\n  }\n": types.DeleteCommentDocument,
    "\n  mutation ModifyModerationCommentVersionMutation(\n    $commentId: Int!\n    $moderatorHash: String!\n    $moderatorNickname: String!\n    $reason: String!\n    $data: ModerationCommentModifyInput!\n    $hasContentWarning: Boolean!\n    $moderationCategory: String\n  ) {\n    modifyModerationComment(\n      commentId: $commentId\n      moderatorHash: $moderatorHash\n      moderatorNickname: $moderatorNickname\n      reason: $reason\n      data: $data\n      hasContentWarning: $hasContentWarning\n      moderationCategory: $moderationCategory\n    ) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        content\n        timestamp\n        version\n        authorHash\n        authorNickname\n        reason\n        latest\n        hasContentWarning\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n": types.ModifyModerationCommentVersionMutationDocument,
    "\n  mutation ModifyModerationPostVersionMutation(\n    $postId: Int!\n    $moderatorHash: String!\n    $moderatorNickname: String!\n    $reason: String!\n    $data: ModerationPostModifyInput!\n    $hasContentWarning: Boolean!\n    $moderationCategory: String\n  ) {\n    modifyModerationPost(\n      postId: $postId\n      moderatorHash: $moderatorHash\n      moderatorNickname: $moderatorNickname\n      reason: $reason\n      data: $data\n      hasContentWarning: $hasContentWarning\n      moderationCategory: $moderationCategory\n    ) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        title\n        content\n        categoryIds\n        files\n        timestamp\n        version\n        authorHash\n        authorNickname\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n": types.ModifyModerationPostVersionMutationDocument,
    "\n  mutation RejectModerationCommentVersionMutation(\n    $id: Int!\n    $moderatorHash: String!\n    $moderatorNickname: String!\n    $reason: String!\n    $moderationCategory: String\n  ) {\n    rejectModerationCommentVersion(\n      id: $id\n      moderatorHash: $moderatorHash\n      moderatorNickname: $moderatorNickname\n      reason: $reason\n      moderationCategory: $moderationCategory\n    ) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        content\n        timestamp\n        version\n        authorHash\n        authorNickname\n        reason\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n": types.RejectModerationCommentVersionMutationDocument,
    "\n  mutation RejectModerationPostVersionMutation(\n    $id: Int!\n    $moderatorHash: String!\n    $moderatorNickname: String!\n    $reason: String!\n    $moderationCategory: String\n  ) {\n    rejectModerationPostVersion(\n      id: $id\n      moderatorHash: $moderatorHash\n      moderatorNickname: $moderatorNickname\n      reason: $reason\n      moderationCategory: $moderationCategory\n    ) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        title\n        content\n        categoryIds\n        files\n        timestamp\n        version\n        authorHash\n        authorNickname\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n": types.RejectModerationPostVersionMutationDocument,
    "\n  mutation RemovePoll($pollId: Int!) {\n    removePoll(pollId: $pollId)\n  }\n": types.RemovePollDocument,
    "\n  mutation RenewCommentModerationMutation($commentModerationId: Int!, $moderatorHash: String!) {\n    renewCommentModeration(commentModerationId: $commentModerationId, moderatorHash: $moderatorHash) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        content\n        timestamp\n        version\n        authorHash\n        authorNickname\n        reason\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n": types.RenewCommentModerationMutationDocument,
    "\n  mutation RenewPostModerationMutation($postModerationId: Int!, $moderatorHash: String!) {\n    renewPostModeration(postModerationId: $postModerationId, moderatorHash: $moderatorHash) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        title\n        content\n        categoryIds\n        files\n        timestamp\n        version\n        authorHash\n        authorNickname\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n": types.RenewPostModerationMutationDocument,
    "\n  mutation UpdateComment($updateCommentId: Int!, $data: CommentUpdateInput!) {\n    updateComment(id: $updateCommentId, data: $data) {\n      id\n      content\n    }\n  }\n": types.UpdateCommentDocument,
    "\n  mutation UpdatePoll($pollId: Int!, $data: PollUpdateInput!) {\n    updatePoll(pollId: $pollId, data: $data) {\n      id\n      question\n      options {\n        id\n        option\n      }\n      active\n      createdAt\n      expiresAt\n      postLink\n      published\n      weight\n    }\n  }\n": types.UpdatePollDocument,
    "\n  mutation VotePoll($voteInput: VoteInput) {\n    votePoll(voteInput: $voteInput) {\n      optionId\n      pollId\n      stats {\n        optionId\n        proportion\n      }\n    }\n  }\n": types.VotePollDocument,
    "\n  query GetCategories($filter: CategoriesFilterInput) {\n    categories(filter: $filter) {\n      edges {\n        node {\n          id\n          name\n          numPosts\n          description\n        }\n        cursor\n      }\n    }\n  }\n": types.GetCategoriesDocument,
    "\n  query Comment($commentId: Int!) {\n    comment(id: $commentId) {\n      id\n      votesDown\n      votesUp\n    }\n  }\n": types.CommentDocument,
    "\n  query GetComments($filter: CommentsFilterInput, $pagination: CommentPaginationInput) {\n    comments(filter: $filter, pagination: $pagination) {\n      edges {\n        node {\n          id\n          content\n          votesDown\n          votesUp\n          votes {\n            authorHash\n            voteType\n          }\n          hasContentWarning\n          hasFromTheModeratorsTag\n          moderated\n          published\n          createdAt\n          moderatedAt\n          publishedAt\n          disabledAt\n          authorHash\n          authorNickname\n          post {\n            id\n          }\n          parent {\n            id\n            authorNickname\n          }\n        }\n      }\n      totalCount\n      pageInfo {\n        endCursor\n        hasNextPage\n        startCursor\n      }\n    }\n  }\n": types.GetCommentsDocument,
    "\n  query GetModerationCommentById($moderationCommentId: Int!) {\n    moderationComment(id: $moderationCommentId) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      status\n      post {\n        id\n        authorHash\n        authorNickname\n        requiredModerations\n        status\n        versions {\n          id\n          title\n          content\n          categoryIds\n          files\n          timestamp\n          version\n          authorHash\n          authorNickname\n          latest\n          hasContentWarning\n          hasFromTheModeratorsTag\n          moderations {\n            id\n            decision\n            moderatorHash\n            moderatorNickname\n            reason\n            timestamp\n          }\n        }\n      }\n      parent {\n        id\n        authorHash\n        authorNickname\n        requiredModerations\n        versions {\n          id\n          content\n          timestamp\n          version\n          authorHash\n          authorNickname\n          hasContentWarning\n          hasFromTheModeratorsTag\n          reason\n          latest\n        }\n      }\n      versions {\n        id\n        content\n        timestamp\n        version\n        authorHash\n        authorNickname\n        hasContentWarning\n        hasFromTheModeratorsTag\n        reason\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n": types.GetModerationCommentByIdDocument,
    "\n  query GetModerationCommentHistoryById($moderationCommentHistoryId: Int!) {\n    moderationCommentsHistory(id: $moderationCommentHistoryId) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      status\n      post {\n        id\n        authorHash\n        authorNickname\n        requiredModerations\n        status\n        versions {\n          id\n          title\n          content\n          categoryIds\n          files\n          timestamp\n          version\n          hasContentWarning\n          hasFromTheModeratorsTag\n          authorHash\n          authorNickname\n          latest\n          moderations {\n            id\n            decision\n            moderatorHash\n            moderatorNickname\n            reason\n            timestamp\n          }\n        }\n      }\n      parent {\n        id\n        authorHash\n        authorNickname\n        requiredModerations\n        versions {\n          id\n          content\n          timestamp\n          version\n          authorHash\n          authorNickname\n          reason\n          latest\n          hasContentWarning\n          hasFromTheModeratorsTag\n        }\n      }\n      versions {\n        id\n        content\n        timestamp\n        version\n        authorHash\n        authorNickname\n        reason\n        latest\n        hasContentWarning\n        hasFromTheModeratorsTag\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n": types.GetModerationCommentHistoryByIdDocument,
    "\n  query GetModerationComments(\n    $before: String\n    $after: String\n    $limit: Int = 10\n    $status: ModerationCommentStatus\n    $published: Boolean\n    $archived: Boolean\n  ) {\n    moderationComments(\n      pagination: { before: $before, after: $after, limit: $limit }\n      filter: { status: $status, published: $published, archived: $archived }\n    ) {\n      edges {\n        cursor\n        node {\n          id\n          authorHash\n          authorNickname\n          requiredModerations\n          status\n          versions {\n            id\n            content\n            authorHash\n            authorNickname\n            timestamp\n            version\n            latest\n            hasContentWarning\n            hasFromTheModeratorsTag\n            moderations {\n              id\n              decision\n              moderatorHash\n              moderatorNickname\n              reason\n              timestamp\n            }\n          }\n        }\n      }\n      totalCount\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n": types.GetModerationCommentsDocument,
    "\n  query GetModerationPostById($moderationPostId: Int!) {\n    moderationPost(id: $moderationPostId) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      status\n      versions {\n        id\n        title\n        content\n        categoryIds\n        files\n        timestamp\n        version\n        reason\n        hasContentWarning\n        hasFromTheModeratorsTag\n        authorHash\n        authorNickname\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n": types.GetModerationPostByIdDocument,
    "\n  query GetModerationPosts(\n    $before: String\n    $after: String\n    $limit: Int = 10\n    $status: ModerationPostStatus\n    $archived: Boolean\n    $published: Boolean\n  ) {\n    moderationPosts(\n      pagination: { before: $before, after: $after, limit: $limit }\n      filter: { status: $status, archived: $archived, published: $published }\n    ) {\n      edges {\n        cursor\n        node {\n          id\n          authorHash\n          authorNickname\n          requiredModerations\n          status\n          versions {\n            id\n            title\n            content\n            categoryIds\n            files\n            authorHash\n            authorNickname\n            timestamp\n            version\n            latest\n            hasContentWarning\n            hasFromTheModeratorsTag\n            moderations {\n              id\n              decision\n              moderatorHash\n              moderatorNickname\n              reason\n              timestamp\n            }\n          }\n        }\n      }\n      totalCount\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n": types.GetModerationPostsDocument,
    "\n  query GetPollsWithResult(\n    $moderatorHash: String!\n    $filter: PollFilterInput!\n    $pagination: PollPaginationInput!\n  ) {\n    pollsWithResult(moderatorHash: $moderatorHash, filter: $filter, pagination: $pagination) {\n      totalCount\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          id\n          question\n          published\n          active\n          postLink\n          weight\n          createdAt\n          expiresAt\n          options {\n            id\n            option\n            numVotes\n          }\n        }\n        cursor\n      }\n    }\n  }\n": types.GetPollsWithResultDocument,
    "\n  query Post($postId: Int!, $presignedUrlExpiresIn: Int!) {\n    post(id: $postId) {\n      authorHash\n      authorNickname\n      categories {\n        id\n        name\n      }\n      comments {\n        id\n        content\n      }\n      content\n      createdAt\n      disabledAt\n      id\n      moderated\n      moderatedAt\n      published\n      publishedAt\n      title\n      votesDown\n      votesUp\n      hasContentWarning\n      hasFromTheModeratorsTag\n      votes {\n        authorHash\n        voteType\n      }\n      presignedDownloadUrls(expiresIn: $presignedUrlExpiresIn) {\n        key\n        url\n      }\n    }\n  }\n": types.PostDocument,
    "\n  query GetPosts(\n    $sort: PostSortingInput\n    $pagination: PostPaginationInput\n    $filter: PostsFilterInput\n    $presignedUrlExpiresIn: Int!\n  ) {\n    posts(sort: $sort, pagination: $pagination, filter: $filter) {\n      edges {\n        node {\n          id\n          title\n          content\n          categories {\n            id\n            name\n          }\n          createdAt\n          moderatedAt\n          publishedAt\n          published\n          moderated\n          authorHash\n          authorNickname\n          comments {\n            id\n            content\n          }\n          votesUp\n          votesDown\n          votes {\n            authorHash\n            voteType\n          }\n          hasContentWarning\n          hasFromTheModeratorsTag\n          presignedDownloadUrls(expiresIn: $presignedUrlExpiresIn) {\n            key\n            url\n          }\n        }\n      }\n      totalCount\n      pageInfo {\n        endCursor\n        hasNextPage\n        startCursor\n      }\n    }\n  }\n": types.GetPostsDocument,
    "\n  query GetTotalPostCount {\n    posts {\n      totalCount\n    }\n  }\n": types.GetTotalPostCountDocument,
    "\n  query GetPresignedDownloadUrls($keys: [String!]!, $expiresIn: Int!) {\n    getPresignedDownloadUrls(keys: $keys, expiresIn: $expiresIn) {\n      key\n      url\n    }\n  }\n": types.GetPresignedDownloadUrlsDocument,
    "\n  query GetPresignedUrls($keys: [String!]!, $expiresIn: Int!) {\n    getPresignedUrls(keys: $keys, expiresIn: $expiresIn) {\n      key\n      url\n    }\n  }\n": types.GetPresignedUrlsDocument,
    "\n  query GetUserPolls($userHash: String!) {\n    votedPolls(userHash: $userHash) {\n      id\n      options {\n        id\n        option\n      }\n      stats {\n        optionId\n        proportion\n      }\n      question\n    }\n    availablePolls(userHash: $userHash) {\n      id\n      options {\n        id\n        option\n      }\n      question\n    }\n  }\n  \n\n": types.GetUserPollsDocument,
    "\n  query Votes($filter: VotesFilterInput) {\n    votes(filter: $filter) {\n      id\n      voteType\n      authorHash\n      authorNickname\n      comment {\n        id\n        votesUp\n        votesDown\n      }\n      post {\n        id\n        votesUp\n        votesDown\n      }\n    }\n  }\n": types.VotesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ApproveModerationCommentVersion(\n    $id: Int!\n    $moderatorHash: String!\n    $moderatorNickname: String!\n    $reason: String\n  ) {\n    approveModerationCommentVersion(\n      id: $id\n      moderatorHash: $moderatorHash\n      moderatorNickname: $moderatorNickname\n      reason: $reason\n    ) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        content\n        timestamp\n        version\n        authorHash\n        authorNickname\n        reason\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ApproveModerationCommentVersion(\n    $id: Int!\n    $moderatorHash: String!\n    $moderatorNickname: String!\n    $reason: String\n  ) {\n    approveModerationCommentVersion(\n      id: $id\n      moderatorHash: $moderatorHash\n      moderatorNickname: $moderatorNickname\n      reason: $reason\n    ) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        content\n        timestamp\n        version\n        authorHash\n        authorNickname\n        reason\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ApproveModerationPostVersion($id: Int!, $moderatorHash: String!, $moderatorNickname: String!, $reason: String) {\n    approveModerationPostVersion(id: $id, moderatorHash: $moderatorHash, moderatorNickname: $moderatorNickname, reason: $reason) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      status\n      versions {\n        id\n        title\n        content\n        categoryIds\n        files\n        timestamp\n        version\n        authorHash\n        authorNickname\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ApproveModerationPostVersion($id: Int!, $moderatorHash: String!, $moderatorNickname: String!, $reason: String) {\n    approveModerationPostVersion(id: $id, moderatorHash: $moderatorHash, moderatorNickname: $moderatorNickname, reason: $reason) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      status\n      versions {\n        id\n        title\n        content\n        categoryIds\n        files\n        timestamp\n        version\n        authorHash\n        authorNickname\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateComment($data: CommentCreateInput!) {\n    createComment(data: $data) {\n      id\n      content\n      createdAt\n      # author {\n      #   id\n      #   nickname\n      # }\n      post {\n        id\n        title\n      }\n      parent {\n        id\n        content\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateComment($data: CommentCreateInput!) {\n    createComment(data: $data) {\n      id\n      content\n      createdAt\n      # author {\n      #   id\n      #   nickname\n      # }\n      post {\n        id\n        title\n      }\n      parent {\n        id\n        content\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateModerationComment($data: ModerationCommentCreateInput!) {\n    createModerationComment(data: $data) {\n      id\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation CreateModerationComment($data: ModerationCommentCreateInput!) {\n    createModerationComment(data: $data) {\n      id\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateModerationPost($data: ModerationPostCreateInput!) {\n    createModerationPost(data: $data) {\n      id\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation CreateModerationPost($data: ModerationPostCreateInput!) {\n    createModerationPost(data: $data) {\n      id\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateOrDeleteVote($data: VoteCreateInput!) {\n    createVote(data: $data) {\n      id\n      voteType\n      authorHash\n      authorNickname\n      post {\n        id\n        votesUp\n        votesDown\n      }\n      comment {\n        id\n        votesUp\n        votesDown\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateOrDeleteVote($data: VoteCreateInput!) {\n    createVote(data: $data) {\n      id\n      voteType\n      authorHash\n      authorNickname\n      post {\n        id\n        votesUp\n        votesDown\n      }\n      comment {\n        id\n        votesUp\n        votesDown\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreatePoll($data: PollCreateInput!) {\n    createPoll(data: $data) {\n      id\n      active\n      options {\n        id\n        option\n      }\n      postLink\n      published\n      question\n      expiresAt\n      createdAt\n      weight\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePoll($data: PollCreateInput!) {\n    createPoll(data: $data) {\n      id\n      active\n      options {\n        id\n        option\n      }\n      postLink\n      published\n      question\n      expiresAt\n      createdAt\n      weight\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteComment($deleteCommentId: Int!) {\n    deleteComment(id: $deleteCommentId) {\n      id\n      # author {\n      #   id\n      #   nickname\n      # }\n      content\n      parent {\n        id\n        content\n      }\n      post {\n        id\n        title\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteComment($deleteCommentId: Int!) {\n    deleteComment(id: $deleteCommentId) {\n      id\n      # author {\n      #   id\n      #   nickname\n      # }\n      content\n      parent {\n        id\n        content\n      }\n      post {\n        id\n        title\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ModifyModerationCommentVersionMutation(\n    $commentId: Int!\n    $moderatorHash: String!\n    $moderatorNickname: String!\n    $reason: String!\n    $data: ModerationCommentModifyInput!\n    $hasContentWarning: Boolean!\n    $moderationCategory: String\n  ) {\n    modifyModerationComment(\n      commentId: $commentId\n      moderatorHash: $moderatorHash\n      moderatorNickname: $moderatorNickname\n      reason: $reason\n      data: $data\n      hasContentWarning: $hasContentWarning\n      moderationCategory: $moderationCategory\n    ) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        content\n        timestamp\n        version\n        authorHash\n        authorNickname\n        reason\n        latest\n        hasContentWarning\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ModifyModerationCommentVersionMutation(\n    $commentId: Int!\n    $moderatorHash: String!\n    $moderatorNickname: String!\n    $reason: String!\n    $data: ModerationCommentModifyInput!\n    $hasContentWarning: Boolean!\n    $moderationCategory: String\n  ) {\n    modifyModerationComment(\n      commentId: $commentId\n      moderatorHash: $moderatorHash\n      moderatorNickname: $moderatorNickname\n      reason: $reason\n      data: $data\n      hasContentWarning: $hasContentWarning\n      moderationCategory: $moderationCategory\n    ) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        content\n        timestamp\n        version\n        authorHash\n        authorNickname\n        reason\n        latest\n        hasContentWarning\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ModifyModerationPostVersionMutation(\n    $postId: Int!\n    $moderatorHash: String!\n    $moderatorNickname: String!\n    $reason: String!\n    $data: ModerationPostModifyInput!\n    $hasContentWarning: Boolean!\n    $moderationCategory: String\n  ) {\n    modifyModerationPost(\n      postId: $postId\n      moderatorHash: $moderatorHash\n      moderatorNickname: $moderatorNickname\n      reason: $reason\n      data: $data\n      hasContentWarning: $hasContentWarning\n      moderationCategory: $moderationCategory\n    ) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        title\n        content\n        categoryIds\n        files\n        timestamp\n        version\n        authorHash\n        authorNickname\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ModifyModerationPostVersionMutation(\n    $postId: Int!\n    $moderatorHash: String!\n    $moderatorNickname: String!\n    $reason: String!\n    $data: ModerationPostModifyInput!\n    $hasContentWarning: Boolean!\n    $moderationCategory: String\n  ) {\n    modifyModerationPost(\n      postId: $postId\n      moderatorHash: $moderatorHash\n      moderatorNickname: $moderatorNickname\n      reason: $reason\n      data: $data\n      hasContentWarning: $hasContentWarning\n      moderationCategory: $moderationCategory\n    ) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        title\n        content\n        categoryIds\n        files\n        timestamp\n        version\n        authorHash\n        authorNickname\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RejectModerationCommentVersionMutation(\n    $id: Int!\n    $moderatorHash: String!\n    $moderatorNickname: String!\n    $reason: String!\n    $moderationCategory: String\n  ) {\n    rejectModerationCommentVersion(\n      id: $id\n      moderatorHash: $moderatorHash\n      moderatorNickname: $moderatorNickname\n      reason: $reason\n      moderationCategory: $moderationCategory\n    ) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        content\n        timestamp\n        version\n        authorHash\n        authorNickname\n        reason\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RejectModerationCommentVersionMutation(\n    $id: Int!\n    $moderatorHash: String!\n    $moderatorNickname: String!\n    $reason: String!\n    $moderationCategory: String\n  ) {\n    rejectModerationCommentVersion(\n      id: $id\n      moderatorHash: $moderatorHash\n      moderatorNickname: $moderatorNickname\n      reason: $reason\n      moderationCategory: $moderationCategory\n    ) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        content\n        timestamp\n        version\n        authorHash\n        authorNickname\n        reason\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RejectModerationPostVersionMutation(\n    $id: Int!\n    $moderatorHash: String!\n    $moderatorNickname: String!\n    $reason: String!\n    $moderationCategory: String\n  ) {\n    rejectModerationPostVersion(\n      id: $id\n      moderatorHash: $moderatorHash\n      moderatorNickname: $moderatorNickname\n      reason: $reason\n      moderationCategory: $moderationCategory\n    ) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        title\n        content\n        categoryIds\n        files\n        timestamp\n        version\n        authorHash\n        authorNickname\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RejectModerationPostVersionMutation(\n    $id: Int!\n    $moderatorHash: String!\n    $moderatorNickname: String!\n    $reason: String!\n    $moderationCategory: String\n  ) {\n    rejectModerationPostVersion(\n      id: $id\n      moderatorHash: $moderatorHash\n      moderatorNickname: $moderatorNickname\n      reason: $reason\n      moderationCategory: $moderationCategory\n    ) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        title\n        content\n        categoryIds\n        files\n        timestamp\n        version\n        authorHash\n        authorNickname\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemovePoll($pollId: Int!) {\n    removePoll(pollId: $pollId)\n  }\n"): (typeof documents)["\n  mutation RemovePoll($pollId: Int!) {\n    removePoll(pollId: $pollId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RenewCommentModerationMutation($commentModerationId: Int!, $moderatorHash: String!) {\n    renewCommentModeration(commentModerationId: $commentModerationId, moderatorHash: $moderatorHash) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        content\n        timestamp\n        version\n        authorHash\n        authorNickname\n        reason\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RenewCommentModerationMutation($commentModerationId: Int!, $moderatorHash: String!) {\n    renewCommentModeration(commentModerationId: $commentModerationId, moderatorHash: $moderatorHash) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        content\n        timestamp\n        version\n        authorHash\n        authorNickname\n        reason\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RenewPostModerationMutation($postModerationId: Int!, $moderatorHash: String!) {\n    renewPostModeration(postModerationId: $postModerationId, moderatorHash: $moderatorHash) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        title\n        content\n        categoryIds\n        files\n        timestamp\n        version\n        authorHash\n        authorNickname\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RenewPostModerationMutation($postModerationId: Int!, $moderatorHash: String!) {\n    renewPostModeration(postModerationId: $postModerationId, moderatorHash: $moderatorHash) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      versions {\n        id\n        title\n        content\n        categoryIds\n        files\n        timestamp\n        version\n        authorHash\n        authorNickname\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateComment($updateCommentId: Int!, $data: CommentUpdateInput!) {\n    updateComment(id: $updateCommentId, data: $data) {\n      id\n      content\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateComment($updateCommentId: Int!, $data: CommentUpdateInput!) {\n    updateComment(id: $updateCommentId, data: $data) {\n      id\n      content\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdatePoll($pollId: Int!, $data: PollUpdateInput!) {\n    updatePoll(pollId: $pollId, data: $data) {\n      id\n      question\n      options {\n        id\n        option\n      }\n      active\n      createdAt\n      expiresAt\n      postLink\n      published\n      weight\n    }\n  }\n"): (typeof documents)["\n  mutation UpdatePoll($pollId: Int!, $data: PollUpdateInput!) {\n    updatePoll(pollId: $pollId, data: $data) {\n      id\n      question\n      options {\n        id\n        option\n      }\n      active\n      createdAt\n      expiresAt\n      postLink\n      published\n      weight\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VotePoll($voteInput: VoteInput) {\n    votePoll(voteInput: $voteInput) {\n      optionId\n      pollId\n      stats {\n        optionId\n        proportion\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation VotePoll($voteInput: VoteInput) {\n    votePoll(voteInput: $voteInput) {\n      optionId\n      pollId\n      stats {\n        optionId\n        proportion\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCategories($filter: CategoriesFilterInput) {\n    categories(filter: $filter) {\n      edges {\n        node {\n          id\n          name\n          numPosts\n          description\n        }\n        cursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCategories($filter: CategoriesFilterInput) {\n    categories(filter: $filter) {\n      edges {\n        node {\n          id\n          name\n          numPosts\n          description\n        }\n        cursor\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Comment($commentId: Int!) {\n    comment(id: $commentId) {\n      id\n      votesDown\n      votesUp\n    }\n  }\n"): (typeof documents)["\n  query Comment($commentId: Int!) {\n    comment(id: $commentId) {\n      id\n      votesDown\n      votesUp\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetComments($filter: CommentsFilterInput, $pagination: CommentPaginationInput) {\n    comments(filter: $filter, pagination: $pagination) {\n      edges {\n        node {\n          id\n          content\n          votesDown\n          votesUp\n          votes {\n            authorHash\n            voteType\n          }\n          hasContentWarning\n          hasFromTheModeratorsTag\n          moderated\n          published\n          createdAt\n          moderatedAt\n          publishedAt\n          disabledAt\n          authorHash\n          authorNickname\n          post {\n            id\n          }\n          parent {\n            id\n            authorNickname\n          }\n        }\n      }\n      totalCount\n      pageInfo {\n        endCursor\n        hasNextPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetComments($filter: CommentsFilterInput, $pagination: CommentPaginationInput) {\n    comments(filter: $filter, pagination: $pagination) {\n      edges {\n        node {\n          id\n          content\n          votesDown\n          votesUp\n          votes {\n            authorHash\n            voteType\n          }\n          hasContentWarning\n          hasFromTheModeratorsTag\n          moderated\n          published\n          createdAt\n          moderatedAt\n          publishedAt\n          disabledAt\n          authorHash\n          authorNickname\n          post {\n            id\n          }\n          parent {\n            id\n            authorNickname\n          }\n        }\n      }\n      totalCount\n      pageInfo {\n        endCursor\n        hasNextPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetModerationCommentById($moderationCommentId: Int!) {\n    moderationComment(id: $moderationCommentId) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      status\n      post {\n        id\n        authorHash\n        authorNickname\n        requiredModerations\n        status\n        versions {\n          id\n          title\n          content\n          categoryIds\n          files\n          timestamp\n          version\n          authorHash\n          authorNickname\n          latest\n          hasContentWarning\n          hasFromTheModeratorsTag\n          moderations {\n            id\n            decision\n            moderatorHash\n            moderatorNickname\n            reason\n            timestamp\n          }\n        }\n      }\n      parent {\n        id\n        authorHash\n        authorNickname\n        requiredModerations\n        versions {\n          id\n          content\n          timestamp\n          version\n          authorHash\n          authorNickname\n          hasContentWarning\n          hasFromTheModeratorsTag\n          reason\n          latest\n        }\n      }\n      versions {\n        id\n        content\n        timestamp\n        version\n        authorHash\n        authorNickname\n        hasContentWarning\n        hasFromTheModeratorsTag\n        reason\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetModerationCommentById($moderationCommentId: Int!) {\n    moderationComment(id: $moderationCommentId) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      status\n      post {\n        id\n        authorHash\n        authorNickname\n        requiredModerations\n        status\n        versions {\n          id\n          title\n          content\n          categoryIds\n          files\n          timestamp\n          version\n          authorHash\n          authorNickname\n          latest\n          hasContentWarning\n          hasFromTheModeratorsTag\n          moderations {\n            id\n            decision\n            moderatorHash\n            moderatorNickname\n            reason\n            timestamp\n          }\n        }\n      }\n      parent {\n        id\n        authorHash\n        authorNickname\n        requiredModerations\n        versions {\n          id\n          content\n          timestamp\n          version\n          authorHash\n          authorNickname\n          hasContentWarning\n          hasFromTheModeratorsTag\n          reason\n          latest\n        }\n      }\n      versions {\n        id\n        content\n        timestamp\n        version\n        authorHash\n        authorNickname\n        hasContentWarning\n        hasFromTheModeratorsTag\n        reason\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetModerationCommentHistoryById($moderationCommentHistoryId: Int!) {\n    moderationCommentsHistory(id: $moderationCommentHistoryId) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      status\n      post {\n        id\n        authorHash\n        authorNickname\n        requiredModerations\n        status\n        versions {\n          id\n          title\n          content\n          categoryIds\n          files\n          timestamp\n          version\n          hasContentWarning\n          hasFromTheModeratorsTag\n          authorHash\n          authorNickname\n          latest\n          moderations {\n            id\n            decision\n            moderatorHash\n            moderatorNickname\n            reason\n            timestamp\n          }\n        }\n      }\n      parent {\n        id\n        authorHash\n        authorNickname\n        requiredModerations\n        versions {\n          id\n          content\n          timestamp\n          version\n          authorHash\n          authorNickname\n          reason\n          latest\n          hasContentWarning\n          hasFromTheModeratorsTag\n        }\n      }\n      versions {\n        id\n        content\n        timestamp\n        version\n        authorHash\n        authorNickname\n        reason\n        latest\n        hasContentWarning\n        hasFromTheModeratorsTag\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetModerationCommentHistoryById($moderationCommentHistoryId: Int!) {\n    moderationCommentsHistory(id: $moderationCommentHistoryId) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      status\n      post {\n        id\n        authorHash\n        authorNickname\n        requiredModerations\n        status\n        versions {\n          id\n          title\n          content\n          categoryIds\n          files\n          timestamp\n          version\n          hasContentWarning\n          hasFromTheModeratorsTag\n          authorHash\n          authorNickname\n          latest\n          moderations {\n            id\n            decision\n            moderatorHash\n            moderatorNickname\n            reason\n            timestamp\n          }\n        }\n      }\n      parent {\n        id\n        authorHash\n        authorNickname\n        requiredModerations\n        versions {\n          id\n          content\n          timestamp\n          version\n          authorHash\n          authorNickname\n          reason\n          latest\n          hasContentWarning\n          hasFromTheModeratorsTag\n        }\n      }\n      versions {\n        id\n        content\n        timestamp\n        version\n        authorHash\n        authorNickname\n        reason\n        latest\n        hasContentWarning\n        hasFromTheModeratorsTag\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetModerationComments(\n    $before: String\n    $after: String\n    $limit: Int = 10\n    $status: ModerationCommentStatus\n    $published: Boolean\n    $archived: Boolean\n  ) {\n    moderationComments(\n      pagination: { before: $before, after: $after, limit: $limit }\n      filter: { status: $status, published: $published, archived: $archived }\n    ) {\n      edges {\n        cursor\n        node {\n          id\n          authorHash\n          authorNickname\n          requiredModerations\n          status\n          versions {\n            id\n            content\n            authorHash\n            authorNickname\n            timestamp\n            version\n            latest\n            hasContentWarning\n            hasFromTheModeratorsTag\n            moderations {\n              id\n              decision\n              moderatorHash\n              moderatorNickname\n              reason\n              timestamp\n            }\n          }\n        }\n      }\n      totalCount\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetModerationComments(\n    $before: String\n    $after: String\n    $limit: Int = 10\n    $status: ModerationCommentStatus\n    $published: Boolean\n    $archived: Boolean\n  ) {\n    moderationComments(\n      pagination: { before: $before, after: $after, limit: $limit }\n      filter: { status: $status, published: $published, archived: $archived }\n    ) {\n      edges {\n        cursor\n        node {\n          id\n          authorHash\n          authorNickname\n          requiredModerations\n          status\n          versions {\n            id\n            content\n            authorHash\n            authorNickname\n            timestamp\n            version\n            latest\n            hasContentWarning\n            hasFromTheModeratorsTag\n            moderations {\n              id\n              decision\n              moderatorHash\n              moderatorNickname\n              reason\n              timestamp\n            }\n          }\n        }\n      }\n      totalCount\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetModerationPostById($moderationPostId: Int!) {\n    moderationPost(id: $moderationPostId) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      status\n      versions {\n        id\n        title\n        content\n        categoryIds\n        files\n        timestamp\n        version\n        reason\n        hasContentWarning\n        hasFromTheModeratorsTag\n        authorHash\n        authorNickname\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetModerationPostById($moderationPostId: Int!) {\n    moderationPost(id: $moderationPostId) {\n      id\n      authorHash\n      authorNickname\n      requiredModerations\n      status\n      versions {\n        id\n        title\n        content\n        categoryIds\n        files\n        timestamp\n        version\n        reason\n        hasContentWarning\n        hasFromTheModeratorsTag\n        authorHash\n        authorNickname\n        latest\n        moderations {\n          id\n          decision\n          moderatorHash\n          moderatorNickname\n          reason\n          timestamp\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetModerationPosts(\n    $before: String\n    $after: String\n    $limit: Int = 10\n    $status: ModerationPostStatus\n    $archived: Boolean\n    $published: Boolean\n  ) {\n    moderationPosts(\n      pagination: { before: $before, after: $after, limit: $limit }\n      filter: { status: $status, archived: $archived, published: $published }\n    ) {\n      edges {\n        cursor\n        node {\n          id\n          authorHash\n          authorNickname\n          requiredModerations\n          status\n          versions {\n            id\n            title\n            content\n            categoryIds\n            files\n            authorHash\n            authorNickname\n            timestamp\n            version\n            latest\n            hasContentWarning\n            hasFromTheModeratorsTag\n            moderations {\n              id\n              decision\n              moderatorHash\n              moderatorNickname\n              reason\n              timestamp\n            }\n          }\n        }\n      }\n      totalCount\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetModerationPosts(\n    $before: String\n    $after: String\n    $limit: Int = 10\n    $status: ModerationPostStatus\n    $archived: Boolean\n    $published: Boolean\n  ) {\n    moderationPosts(\n      pagination: { before: $before, after: $after, limit: $limit }\n      filter: { status: $status, archived: $archived, published: $published }\n    ) {\n      edges {\n        cursor\n        node {\n          id\n          authorHash\n          authorNickname\n          requiredModerations\n          status\n          versions {\n            id\n            title\n            content\n            categoryIds\n            files\n            authorHash\n            authorNickname\n            timestamp\n            version\n            latest\n            hasContentWarning\n            hasFromTheModeratorsTag\n            moderations {\n              id\n              decision\n              moderatorHash\n              moderatorNickname\n              reason\n              timestamp\n            }\n          }\n        }\n      }\n      totalCount\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPollsWithResult(\n    $moderatorHash: String!\n    $filter: PollFilterInput!\n    $pagination: PollPaginationInput!\n  ) {\n    pollsWithResult(moderatorHash: $moderatorHash, filter: $filter, pagination: $pagination) {\n      totalCount\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          id\n          question\n          published\n          active\n          postLink\n          weight\n          createdAt\n          expiresAt\n          options {\n            id\n            option\n            numVotes\n          }\n        }\n        cursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPollsWithResult(\n    $moderatorHash: String!\n    $filter: PollFilterInput!\n    $pagination: PollPaginationInput!\n  ) {\n    pollsWithResult(moderatorHash: $moderatorHash, filter: $filter, pagination: $pagination) {\n      totalCount\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          id\n          question\n          published\n          active\n          postLink\n          weight\n          createdAt\n          expiresAt\n          options {\n            id\n            option\n            numVotes\n          }\n        }\n        cursor\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Post($postId: Int!, $presignedUrlExpiresIn: Int!) {\n    post(id: $postId) {\n      authorHash\n      authorNickname\n      categories {\n        id\n        name\n      }\n      comments {\n        id\n        content\n      }\n      content\n      createdAt\n      disabledAt\n      id\n      moderated\n      moderatedAt\n      published\n      publishedAt\n      title\n      votesDown\n      votesUp\n      hasContentWarning\n      hasFromTheModeratorsTag\n      votes {\n        authorHash\n        voteType\n      }\n      presignedDownloadUrls(expiresIn: $presignedUrlExpiresIn) {\n        key\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  query Post($postId: Int!, $presignedUrlExpiresIn: Int!) {\n    post(id: $postId) {\n      authorHash\n      authorNickname\n      categories {\n        id\n        name\n      }\n      comments {\n        id\n        content\n      }\n      content\n      createdAt\n      disabledAt\n      id\n      moderated\n      moderatedAt\n      published\n      publishedAt\n      title\n      votesDown\n      votesUp\n      hasContentWarning\n      hasFromTheModeratorsTag\n      votes {\n        authorHash\n        voteType\n      }\n      presignedDownloadUrls(expiresIn: $presignedUrlExpiresIn) {\n        key\n        url\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPosts(\n    $sort: PostSortingInput\n    $pagination: PostPaginationInput\n    $filter: PostsFilterInput\n    $presignedUrlExpiresIn: Int!\n  ) {\n    posts(sort: $sort, pagination: $pagination, filter: $filter) {\n      edges {\n        node {\n          id\n          title\n          content\n          categories {\n            id\n            name\n          }\n          createdAt\n          moderatedAt\n          publishedAt\n          published\n          moderated\n          authorHash\n          authorNickname\n          comments {\n            id\n            content\n          }\n          votesUp\n          votesDown\n          votes {\n            authorHash\n            voteType\n          }\n          hasContentWarning\n          hasFromTheModeratorsTag\n          presignedDownloadUrls(expiresIn: $presignedUrlExpiresIn) {\n            key\n            url\n          }\n        }\n      }\n      totalCount\n      pageInfo {\n        endCursor\n        hasNextPage\n        startCursor\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPosts(\n    $sort: PostSortingInput\n    $pagination: PostPaginationInput\n    $filter: PostsFilterInput\n    $presignedUrlExpiresIn: Int!\n  ) {\n    posts(sort: $sort, pagination: $pagination, filter: $filter) {\n      edges {\n        node {\n          id\n          title\n          content\n          categories {\n            id\n            name\n          }\n          createdAt\n          moderatedAt\n          publishedAt\n          published\n          moderated\n          authorHash\n          authorNickname\n          comments {\n            id\n            content\n          }\n          votesUp\n          votesDown\n          votes {\n            authorHash\n            voteType\n          }\n          hasContentWarning\n          hasFromTheModeratorsTag\n          presignedDownloadUrls(expiresIn: $presignedUrlExpiresIn) {\n            key\n            url\n          }\n        }\n      }\n      totalCount\n      pageInfo {\n        endCursor\n        hasNextPage\n        startCursor\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetTotalPostCount {\n    posts {\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query GetTotalPostCount {\n    posts {\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPresignedDownloadUrls($keys: [String!]!, $expiresIn: Int!) {\n    getPresignedDownloadUrls(keys: $keys, expiresIn: $expiresIn) {\n      key\n      url\n    }\n  }\n"): (typeof documents)["\n  query GetPresignedDownloadUrls($keys: [String!]!, $expiresIn: Int!) {\n    getPresignedDownloadUrls(keys: $keys, expiresIn: $expiresIn) {\n      key\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPresignedUrls($keys: [String!]!, $expiresIn: Int!) {\n    getPresignedUrls(keys: $keys, expiresIn: $expiresIn) {\n      key\n      url\n    }\n  }\n"): (typeof documents)["\n  query GetPresignedUrls($keys: [String!]!, $expiresIn: Int!) {\n    getPresignedUrls(keys: $keys, expiresIn: $expiresIn) {\n      key\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserPolls($userHash: String!) {\n    votedPolls(userHash: $userHash) {\n      id\n      options {\n        id\n        option\n      }\n      stats {\n        optionId\n        proportion\n      }\n      question\n    }\n    availablePolls(userHash: $userHash) {\n      id\n      options {\n        id\n        option\n      }\n      question\n    }\n  }\n  \n\n"): (typeof documents)["\n  query GetUserPolls($userHash: String!) {\n    votedPolls(userHash: $userHash) {\n      id\n      options {\n        id\n        option\n      }\n      stats {\n        optionId\n        proportion\n      }\n      question\n    }\n    availablePolls(userHash: $userHash) {\n      id\n      options {\n        id\n        option\n      }\n      question\n    }\n  }\n  \n\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Votes($filter: VotesFilterInput) {\n    votes(filter: $filter) {\n      id\n      voteType\n      authorHash\n      authorNickname\n      comment {\n        id\n        votesUp\n        votesDown\n      }\n      post {\n        id\n        votesUp\n        votesDown\n      }\n    }\n  }\n"): (typeof documents)["\n  query Votes($filter: VotesFilterInput) {\n    votes(filter: $filter) {\n      id\n      voteType\n      authorHash\n      authorNickname\n      comment {\n        id\n        votesUp\n        votesDown\n      }\n      post {\n        id\n        votesUp\n        votesDown\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;