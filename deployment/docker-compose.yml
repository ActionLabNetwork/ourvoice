name: ourvoice
# List of networks
networks:
  backend:
  frontend:
    driver: bridge

services:
  # dev proxy
  nginx:
    image: nginx
    ports:
      - '80:80'
    volumes:
      - ./init/nginx/dev.conf:/etc/nginx/conf.d/default.conf
  # Postgresql DB
  db:
    image: postgres:15-alpine
    container_name: ourvoice-app-db
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      # mount db volume to the container
      - ${POSTGRES_DB_LOCATION}:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_DB_PORT}:5432
    networks:
      - backend
  test-db:
    image: postgres:15-alpine
    container_name: ourvoice-app-db-test
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB_TEST}
      DATABASE_URL: ${TEST_DATABASE_URL}
    ports:
      - ${POSTGRES_DB_TEST_PORT}:5432
  moderation-db:
    image: postgres:15-alpine
    container_name: ourvoice-db-moderation
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB_MODERATION}
    volumes:
      # mount db volume to the container
      - ${POSTGRES_DB_MODERATION_LOCATION}:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_DB_MODERATION_PORT}:5432
    networks:
      - backend
  test-moderation-db:
    image: postgres:15-alpine
    container_name: ourvoice-db-moderation-test
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB_MODERATION_TEST}
      DATABASE_URL: ${TEST_DATABASE_URL_MODERATION}
    ports:
      - ${POSTGRES_DB_MODERATION_TEST_PORT}:5432
  # auth db
  authdb:
    image: 'postgres:16'
    environment:
      POSTGRES_USER: ${AUTH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AUTH_POSTGRES_DB}
    volumes:
      - ${AUTH_POSTGRES_DB_LOCATION}:/var/lib/postgresql/data
    ports:
      - ${AUTH_POSTGRES_DB_PORT}:5432
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready', '-d', "'${AUTH_POSTGRES_DB}'"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  # contact form database
  # for development only
  ourvoice-contact-form-db:
    container_name: ourvoice-contact-form-db
    image: mongo:6
    networks:
      - backend
    restart: unless-stopped
    ports:
      - '${CONTACT_FORM_DB_PORT}:27017'
    environment:
      - 'MONGO_INITDB_ROOT_USERNAME:${CONTACT_FORM_DB_ROOT_USERNAME}'
      - 'MONGO_INITDB_ROOT_PASSWORD:${CONTACT_FORM_DB_ROOT_PASSWORD}'
    volumes:
      - ./contactformdb/db:/data/db
      - ./init/contactform/init.sh:/init.sh
    command: bash /init.sh

  # auth manager
  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql:9.1
    container_name: supertokens
    depends_on:
      authdb:
        condition: service_healthy
    ports:
      - 3567:3567
    environment:
      POSTGRESQL_CONNECTION_URI: 'postgresql://${AUTH_POSTGRES_USER}:${AUTH_POSTGRES_PASSWORD}@authdb:5432/${AUTH_POSTGRES_DB}'
      # session timeout (1 day in minutes)
      REFRESH_TOKEN_VALIDITY: ${SUPERTOKENS_REFRESH_TOKEN_VALIDITY}
      ACCESS_TOKEN_VALIDITY: ${SUPERTOKENS_ACCESS_TOKEN_VALIDITY}
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5
  localstack:
    image: localstack/localstack:latest
    container_name: localstack-s3
    ports:
      - '4510-4559:4510-4559'
      - '4566:4566'
    environment:
      - SERVICES=s3
      - DEBUG=1
      - PERSISTENCE=1
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - ./init/aws/s3-config.json:/tmp/s3-config.json:ro
      - ./init/aws/init.sh:/etc/localstack/init/ready.d/init.sh:ro
      - ${S3_VOLUME_LOCATION:-./volume}:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  db:
    name: backend
  moderation-db:
    name: moderation
  authdb:
    name: auth
  localstack:
    name: s3
