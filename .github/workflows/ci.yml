# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: CI

on:
  push:
    branches: ['dev', 'main']
    paths-ignore:
      - 'deployment/**'
  pull_request:
    branches: ['dev', 'main']
    paths-ignore:
      - 'deployment/**'

permissions:
  contents: read

env:
  DB_TEST_MAIN_DATABASE: ourvoice_db_test
  DB_TEST_MAIN_USERNAME: your_db_user
  DB_TEST_MAIN_PASSWORD: your_db_password
  # DB_TEST_PREMOD_DATABASE: ourvoice_db_test_premod
  # DB_TEST_PREMOD_USERNAME: your_db_user
  # DB_TEST_PREMOD_PASSWORD: your_db_password!

jobs:
  lint:
    name: Lint code

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Repository checkout
        uses: actions/checkout@v3.5.3

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 8

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm lint

  # API
  api-db-test:
    name: API (Node.js ${{ matrix.node-version }}, Postgres ${{ matrix.postgres-version }})
    runs-on: ubuntu-latest
    needs: lint

    env:
      DB_TEST_APP_API_DB_MAIN_DRIVER: postgres
      DB_TEST_APP_API_DB_MAIN_HOST: localhost
      DB_TEST_APP_API_DB_MAIN_PORT: 5436
      # DB_TEST_APP_API_DB_PREMOD_DRIVER: postgres
      # DB_TEST_APP_API_DB_PREMOD_HOST: localhost
      # DB_TEST_APP_API_DB_PREMOD_PORT: 5436

    strategy:
      matrix:
        node-version: [18.x]
        postgres-version: [15]

    services:
      postgres-app-db-main:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_USER: your_db_user
          POSTGRES_PASSWORD: your_db_password
          POSTGRES_DB: ourvoice_db_test
          # POSTGRES_DB_PREMODERATION: ourvoice_db_pre
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5

        ports:
          - 5436:5432
    steps:
      - name: Repository checkout
        uses: actions/checkout@v3.5.3

      # - name: Create main databases if not exists
      #   run: |
      #     PGPASSWORD=${{ env.DB_TEST_MAIN_PASSWORD }} psql -U ${{ env.DB_TEST_MAIN_USERNAME }} -d postgres -tc "SELECT 1 FROM pg_database WHERE datname = '${{ env.DB_TEST_MAIN_DATABASE }}'" | grep -q 1 || psql -h ${{ env.DB_TEST_APP_API_DB_MAIN_HOST }} -p ${{env.DB_TEST_APP_API_DB_MAIN_PORT}} -U ${{ env.DB_TEST_MAIN_USERNAME }} -d postgres -c 'CREATE DATABASE ${{ env.DB_TEST_MAIN_DATABASE }};'

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 8

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: API - integration tests
        working-directory: apps/ourvoice-api
        run: pnpm test:integration

  # APPS Build
  build-apps:
    name: Build APPS (Node.js ${{ matrix.node-version }}, Postgres ${{ matrix.postgres-version }})
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Repository checkout
        uses: actions/checkout@v3.5.3

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 8

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: API - build
        working-directory: apps/ourvoice-api
        run: pnpm build

      - name: ADMIN - build
        working-directory: apps/ourvoice-admin
        run: pnpm build

      - name: WEB APP - build
        working-directory: apps/ourvoice-app
        run: pnpm build:ci

      - name: WEB PORTAL - build
        working-directory: apps/ourvoice-portal
        run: pnpm build

  # API auth
  # api-auth:
  #   name: Auth API (Node.js ${{ matrix.node-version }}, Postgres ${{ matrix.postgres-version }})

  #   runs-on: ubuntu-latest

  #   needs: lint

  #   env:
  #     DB_AUTH_TEST_SYSTEM_DRIVER: postgres
  #     DB_AUTH_TEST_SYSTEM_HOST: localhost
  #     DB_AUTH_TEST_SYSTEM_PORT: 5432

  #   strategy:
  #     matrix:
  #       node-version: [18.x]
  #       postgres-version: [15]
  #       supertokens-version: [4.3]

  #   services:
  #     authdb:
  #       image: postgres:${{ matrix.postgres-version }}
  #       env:
  #         POSTGRES_USER: supertokens_user
  #         POSTGRES_PASSWORD: somePassword
  #         POSTGRES_DB: supertokens
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432
  #     # auth manager
  #     supertokens:
  #       image: registry.supertokens.io/supertokens/supertokens-postgresql:${{ matrix.supertokens-version }}
  #       env:
  #         POSTGRESQL_CONNECTION_URI: "postgresql://supertokens_user:somePassword@authdb:5432/supertokens"
  #       options: >-
  #         --health-cmd "bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep `Hello`'"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 3567:3567

  #   steps:
  #     - name: Repository checkout
  #       uses: actions/checkout@v3.5.2

  #     - name: Install pnpm
  #       uses: pnpm/action-setup@v2.2.4
  #       with:
  #         version: 8

  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v3.6.0
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #         cache: "pnpm"

  #     - name: Install dependencies
  #       run: pnpm install

  #     - name: API - dummy end-to-end tests
  #       working-directory: apps/ourvoice-auth-api
  #       run: pnpm test:e2e
