# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: CI/CD

on:
  push:
    branches: ['dev', 'main']
    paths-ignore:
      - 'deployment/**'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Push events to tags matching v1.0.0
  pull_request:
    branches: ['dev', 'main']
    paths-ignore:
      - 'deployment/**'

permissions:
  contents: read

env:
  DB_TEST_MAIN_DATABASE: ourvoice_db_test
  DB_TEST_MAIN_USERNAME: your_db_user
  DB_TEST_MAIN_PASSWORD: your_db_password
  # DB_TEST_MOD_DATABASE: ourvoice_db_test_mod
  # DB_TEST_MOD_USERNAME: your_db_user
  # DB_TEST_MOD_PASSWORD: your_db_password!

jobs:
  lint:
    name: Lint code

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Repository checkout
        uses: actions/checkout@v3.5.3

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 8

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm lint

  # API & APP Tests
  app-api-db-test:
    name: APP & API (Node.js ${{ matrix.node-version }}, Postgres ${{ matrix.postgres-version }})
    runs-on: ubuntu-latest
    needs: lint

    env:
      DB_TEST_APP_API_DB_MAIN_DRIVER: postgres
      DB_TEST_APP_API_DB_MAIN_HOST: localhost
      DB_TEST_APP_API_DB_MAIN_PORT: 5436
      DB_TEST_APP_API_DB_MOD_DRIVER: postgres
      DB_TEST_APP_API_DB_MOD_HOST: localhost
      DB_TEST_APP_API_DB_MOD_PORT: 5437
      NODE_ENV: test

    strategy:
      matrix:
        node-version: [18.x]
        postgres-version: [15]

    services:
      postgres-app-db-main:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_USER: your_db_user
          POSTGRES_PASSWORD: your_db_password
          POSTGRES_DB: ourvoice_db_test
          # POSTGRES_DB_MODERATION: ourvoice_db_mod
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
        ports:
          - 5436:5432
      postgres-app-db-moderation:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_USER: your_db_user
          POSTGRES_PASSWORD: your_db_password
          POSTGRES_DB: ourvoice_db_test
          POSTGRES_DB_MODERATION: ourvoice_db_test_mod
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
        ports:
          - 5437:5432

    steps:
      - name: Repository checkout
        uses: actions/checkout@v3.5.3

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.8.0
        with:
          mongodb-version: 6.0
          mongodb-replica-set: rs0
          mongodb-port: 27017

      # - name: Create main databases if not exists
      #   run: |
      #     PGPASSWORD=${{ env.DB_TEST_MAIN_PASSWORD }} psql -U ${{ env.DB_TEST_MAIN_USERNAME }} -d postgres -tc "SELECT 1 FROM pg_database WHERE datname = '${{ env.DB_TEST_MAIN_DATABASE }}'" | grep -q 1 || psql -h ${{ env.DB_TEST_APP_API_DB_MAIN_HOST }} -p ${{env.DB_TEST_APP_API_DB_MAIN_PORT}} -U ${{ env.DB_TEST_MAIN_USERNAME }} -d postgres -c 'CREATE DATABASE ${{ env.DB_TEST_MAIN_DATABASE }};'

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 8

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: API - unit tests
        working-directory: apps/ourvoice-api
        run: pnpm test

      - name: API - integration tests
        working-directory: apps/ourvoice-api
        run: pnpm test:integration

      # - name: Cypress Cache path
      #   working-directory: apps/ourvoice-app
      #   run: pnpx cypress cache path

      # - name: Cypress Cache list
      #   working-directory: apps/ourvoice-app
      #   run: pnpx cypress cache list

      # - name: Install Cypress
      #   working-directory: apps/ourvoice-app
      #   run: pnpx cypress install

      # - name: Verify Cypress
      #   working-directory: apps/ourvoice-app
      #   run: pnpx cypress verify

      # - name: Generate contactform prisma
      #   run: pnpm generate:api:contactform

      # - name: Boot up servers
      #   run: pnpm dev:apps & wait-on http://localhost:3010 http://localhost:3020 http://localhost:3030 http://localhost:3011

      # - name: APP - e2e tests
      #   working-directory: apps/ourvoice-app
      #   run: node_modules/.bin/cypress run

  # APPS Build
  build-apps-test:
    name: Build APPS (Node.js ${{ matrix.node-version }}) and push to Docker-Hub if tagged
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        node-version: [18.x]
        postgres-version: [15]

    services:
      postgres-app-db-main:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_USER: your_db_user
          POSTGRES_PASSWORD: your_db_password
          POSTGRES_DB: ourvoice_db
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5

        ports:
          - 5433:5432

      postgres-app-db-mod:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_USER: your_db_user
          POSTGRES_PASSWORD: your_db_password
          POSTGRES_DB: ourvoice_db_mod
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5

        ports:
          - 5435:5432

    steps:
      - name: Repository checkout
        uses: actions/checkout@v3.5.3

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 8

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        env:
          RUN_POST: ${{ env.RUN_POST}}
          DOCKER_BUILD: ${{ env.DOCKER_BUILD}}
        run: pnpm install

      - name: Prisma Migration API main DB
        working-directory: apps/ourvoice-api
        run: pnpm prisma:migrate:main

      - name: Prisma Migration API mod DB
        working-directory: apps/ourvoice-api
        run: pnpm prisma:migrate:moderation

      - name: Prisma Generate API main DB
        working-directory: apps/ourvoice-api
        run: pnpm prisma:generate:main

      - name: Prisma Generate API mod DB
        working-directory: apps/ourvoice-api
        run: pnpm prisma:generate:moderation

      - name: Prisma Generate API contactform DB
        working-directory: apps/ourvoice-api
        run: pnpm prisma:generate:contactform

      - name: API - build
        env:
          NODE_ENV: production
        working-directory: apps/ourvoice-api
        run: pnpm build

      - name: ADMIN - build
        env:
          NODE_ENV: production
        working-directory: apps/ourvoice-admin
        run: pnpm build

      - name: WEB APP - build
        env:
          NODE_ENV: production
        working-directory: apps/ourvoice-app
        run: pnpm build:ci

      - name: WEB PORTAL - build
        env:
          NODE_ENV: production
        working-directory: apps/ourvoice-portal
        run: pnpm build

  # build-docker-images-and-push:
  #   name: Build APPS (Node.js ${{ matrix.node-version }}) and push to Docker-Hub if tagged
  #   runs-on: ubuntu-latest
  #   # needs: build-apps-test

  #   strategy:
  #     matrix:
  #       node-version: [18.x]

  #   permissions:
  #     deployments: write
  #     contents: write
  #     statuses: write
  #     actions: write
  #     checks: read

  #   env:
  #     APPS_PORTAL_APP: portal
  #     APPS_ADMIN_APP: admin
  #     APPS_API_APP: api
  #     APPS_APP_APP: app
  #     APPS_APP_AUTH: auth
  #     APPS_APP_AUTHAPI: auth-api
  #     RUN_POST: false
  #     DOCKER_BUILD: true
  #     IMG_NAME: ${{ github.repository }}

  #   steps:

  #     - name: Repository checkout
  #       uses: actions/checkout@v3.5.3

  #     - name: Info
  #       run: echo "Parameters. ${{ github.event.base_ref }}, ${{ github.ref_type }}, ${{ github.ref }}"

  #     - name: Automatic Tagging of Releases
  #       if: startsWith(github.ref, 'refs/heads/dev') && github.event_name != 'pull_request' && github.ref_type != 'tag'
  #       id: increment-git-tag
  #       run: |
  #         echo "Incrementing git tag"
  #         # bash ./deployment/build-docker/git_tag_update.sh -v patch


  #     # Building docker containers
  #     - name: Docker metadata
  #       if: startsWith(github.ref, 'refs/heads/dev') && github.event_name != 'pull_request'
  #       id: metadata
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: ${{ env.IMG_NAME }}
  #         tags: |
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}
  #           type=raw,value=dev-{{date 'YYYYMMDDhhmm'}}.{{sha}},enable=${{ github.ref_type != 'tag' }}

  #     - name: Set up Docker Buildx
  #       if: startsWith(github.ref, 'refs/heads/dev') && github.event_name != 'pull_request' && steps.increment-git-tag.conclusion == 'success'
  #       uses: docker/setup-buildx-action@v2

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v2
  #       id: login-to-docker-hub
  #       if: startsWith(github.ref, 'refs/heads/dev') && github.event_name != 'pull_request' && steps.increment-git-tag.conclusion == 'success'
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Copy Dockerfile template from the root to APPS folders
  #       id: dockerfile-copy
  #       if: startsWith(github.ref, 'refs/heads/dev') && github.event_name != 'pull_request' && steps.increment-git-tag.conclusion == 'success'
  #       run: |
  #         cp Dockerfile-for-apps.template apps/ourvoice-${{env.APPS_PORTAL_APP}}/Dockerfile
  #         cp Dockerfile-for-apps.template apps/ourvoice-${{env.APPS_ADMIN_APP}}/Dockerfile
  #         cp Dockerfile-for-apps.template apps/ourvoice-${{env.APPS_API_APP}}/Dockerfile
  #         cp Dockerfile-for-apps.template apps/ourvoice-${{env.APPS_APP_APP}}/Dockerfile
  #         cp Dockerfile-for-apps.template apps/ourvoice-${{env.APPS_APP_AUTH}}/Dockerfile
  #         cp Dockerfile-for-apps.template apps/ourvoice-${{env.APPS_APP_AUTHAPI}}/Dockerfile

  #     - name: Build and push Docker images for API
  #       if: startsWith(github.ref, 'refs/heads/dev') && github.event_name != 'pull_request' && steps.login-to-docker-hub.conclusion == 'success'
  #       uses: docker/build-push-action@v4
  #       env:
  #         IMAGE_BASE_NAME: ${{ github.event.repository.name}}
  #         IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
  #         DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}
  #         NODE_ENV: production
  #       with:
  #         context: apps/ourvoice-${{env.APPS_API_APP}}
  #         file: apps/ourvoice-${{env.APPS_API_APP}}/Dockerfile
  #         push: true
  #         build-args: |
  #           NODE_ENV=${{env.NODE_ENV}}
  #           DIR=${{env.APPS_API_APP}}
  #           APP=${{env.APPS_API_APP}}
  #         tags: ${{env.APPS_API_APP}}
  #       # run: |
  #       #   docker build -t ${{env.DOCKER_REPO}}/${{ env.IMAGE_BASE_NAME }}:${{ env.IMAGE_TAG }} .
  #       #   docker push ${{env.DOCKER_REPO}}/${{ env.IMAGE_BASE_NAME }}:${{ env.IMAGE_TAG }}
  #       # docker tag ${{ env.IMAGE_BASE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.IMAGE_BASE_NAME }}:latest
  #       # docker push ${{ env.IMAGE_BASE_NAME }}:latest

  deploy-staging:
    name: Deploy APPS on staging server with PM2 (Node.js ${{ matrix.node-version }}, Postgres ${{ matrix.postgres-version }})
    if: startsWith(github.ref, 'refs/heads/dev')
    runs-on: [self-hosted, linux]
    needs: build-apps-test

    strategy:
      matrix:
        node-version: [18.x]
        postgres-version: [15]

    # services:
    #   postgres-app-db-main:
    #     image: postgres:${{ matrix.postgres-version }}
    #     env:
    #       POSTGRES_USER: your_db_user
    #       POSTGRES_PASSWORD: your_db_password
    #       POSTGRES_DB: ourvoice_db
    #       options: >-
    #         --health-cmd pg_isready
    #         --health-interval 10s
    #         --health-timeout 5s
    #         --health-retries 5

    #     ports:
    #       - 5433:5432

    #   postgres-app-db-mod:
    #     image: postgres:${{ matrix.postgres-version }}
    #     env:
    #       POSTGRES_USER: your_db_user
    #       POSTGRES_PASSWORD: your_db_password
    #       POSTGRES_DB: ourvoice_db_pre
    #       options: >-
    #         --health-cmd pg_isready
    #         --health-interval 10s
    #         --health-timeout 5s
    #         --health-retries 5

    #     ports:
    #       - 5435:5432

    steps:
      - name: Echo test hello world
        run: echo "Hello world"

      # - name: Repository checkout
      #   uses: actions/checkout@v3.5.3

      # - name: Install pnpm
      #   uses: pnpm/action-setup@v2.2.4
      #   with:
      #     version: 8

      # - name: Use Node.js ${{ matrix.node-version }}
      #   uses: actions/setup-node@v3.6.0
      #   with:
      #     node-version: ${{ matrix.node-version }}
      #     cache: 'pnpm'

      # - name: Install dependencies
      #   run: pnpm install

      # - name: Prisma Migration API main DB
      #   working-directory: apps/ourvoice-api
      #   run: pnpm prisma:migrate:main

      # - name: Prisma Migration API mod DB
      #   working-directory: apps/ourvoice-api
      #   run: pnpm prisma:migrate:moderation

      # - name: Prisma Generate API main DB
      #   working-directory: apps/ourvoice-api
      #   run: pnpm prisma:generate:main

      # - name: Prisma Generate API mod DB
      #   working-directory: apps/ourvoice-api
      #   run: pnpm prisma:generate:moderation

      # - name: Prisma Generate API contactform DB
      #   working-directory: apps/ourvoice-api
      #   run: pnpm prisma:generate:contactform

  # API auth
  # api-auth:
  #   name: Auth API (Node.js ${{ matrix.node-version }}, Postgres ${{ matrix.postgres-version }})

  #   runs-on: ubuntu-latest

  #   needs: lint

  #   env:
  #     DB_AUTH_TEST_SYSTEM_DRIVER: postgres
  #     DB_AUTH_TEST_SYSTEM_HOST: localhost
  #     DB_AUTH_TEST_SYSTEM_PORT: 5432

  #   strategy:
  #     matrix:
  #       node-version: [18.x]
  #       postgres-version: [15]
  #       supertokens-version: [4.3]

  #   services:
  #     authdb:
  #       image: postgres:${{ matrix.postgres-version }}
  #       env:
  #         POSTGRES_USER: supertokens_user
  #         POSTGRES_PASSWORD: somePassword
  #         POSTGRES_DB: supertokens
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432
  #     # auth manager
  #     supertokens:
  #       image: registry.supertokens.io/supertokens/supertokens-postgresql:${{ matrix.supertokens-version }}
  #       env:
  #         POSTGRESQL_CONNECTION_URI: "postgresql://supertokens_user:somePassword@authdb:5432/supertokens"
  #       options: >-
  #         --health-cmd "bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep `Hello`'"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 3567:3567

  #   steps:
  #     - name: Repository checkout
  #       uses: actions/checkout@v3.5.2

  #     - name: Install pnpm
  #       uses: pnpm/action-setup@v2.2.4
  #       with:
  #         version: 8

  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v3.6.0
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #         cache: "pnpm"

  #     - name: Install dependencies
  #       run: pnpm install

  #     - name: API - dummy end-to-end tests
  #       working-directory: apps/ourvoice-auth-api
  #       run: pnpm test:e2e
